# Generated by Django 5.0.1 on 2025-10-12 20:49

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConflictReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('severity', models.CharField(choices=[('error', 'Error'), ('warning', 'Warning'), ('info', 'Info')], default='error', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Conflict Report',
                'verbose_name_plural': 'Conflict Reports',
                'ordering': ['-generated_at', 'severity'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('room_type', models.CharField(choices=[('classroom', 'Regular Classroom'), ('lab', 'Laboratory'), ('computer_lab', 'Computer Lab'), ('gym', 'Gymnasium'), ('art_room', 'Art Room'), ('music_room', 'Music Room')], default='classroom', max_length=30)),
                ('capacity', models.IntegerField(default=40, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('availability', models.JSONField(blank=True, default=dict, help_text='JSON: {day_index: {period_index: true/false}}')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(default='My School', max_length=200)),
                ('academic_year', models.CharField(default='2024-2025', max_length=20)),
                ('days_per_week', models.IntegerField(default=5, help_text='Number of working days per week (typically 5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('lesson_start_time', models.TimeField(default='08:00:00', help_text='First lesson start time')),
                ('lesson_duration_min', models.IntegerField(default=45, help_text='Duration of each lesson in minutes')),
                ('periods_before_break', models.IntegerField(default=2, help_text='Number of periods before first break')),
                ('break_duration_min', models.IntegerField(default=15, help_text='Short break duration in minutes')),
                ('periods_after_break', models.IntegerField(default=2, help_text='Periods between break and lunch')),
                ('lunch_duration_min', models.IntegerField(default=45, help_text='Lunch break duration in minutes')),
            ],
            options={
                'verbose_name': 'School Settings',
                'verbose_name_plural': 'School Settings',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('weekly_periods', models.IntegerField(default=3, help_text='Required periods per week', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('subject_type', models.CharField(choices=[('theory', 'Theory'), ('practical', 'Practical')], default='theory', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('fair', 'Fair'), ('difficult', 'Difficult')], default='fair', max_length=20)),
                ('requires_room_type', models.CharField(choices=[('classroom', 'Regular Classroom'), ('lab', 'Laboratory'), ('computer_lab', 'Computer Lab'), ('gym', 'Gymnasium'), ('art_room', 'Art Room'), ('music_room', 'Music Room')], default='classroom', help_text='Type of room required for this subject', max_length=30)),
                ('requires_consecutive_periods', models.BooleanField(default=False, help_text='Should be scheduled in double periods')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Grade 10A', max_length=50, unique=True)),
                ('student_count', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('subjects', models.ManyToManyField(blank=True, related_name='classes', to='timetable.subject')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('max_periods_week', models.IntegerField(default=25, help_text='Maximum teaching periods per week', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('availability', models.JSONField(blank=True, default=dict, help_text='JSON: {day_index: {period_index: true/false}}')),
                ('subjects', models.ManyToManyField(blank=True, related_name='teachers', to='timetable.subject')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_index', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('period_index', models.IntegerField(help_text='0-based period number within the day')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
            ],
            options={
                'ordering': ['day_index', 'period_index'],
                'unique_together': {('day_index', 'period_index')},
            },
        ),
        migrations.CreateModel(
            name='TimetableEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_locked', models.BooleanField(default=False, help_text="Locked entries won't be modified by the solver")),
                ('classgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='timetable.classgroup')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='timetable.room')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='timetable.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='timetable.teacher')),
                ('timeslot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='timetable.timeslot')),
            ],
            options={
                'verbose_name': 'Timetable Entry',
                'verbose_name_plural': 'Timetable Entries',
                'ordering': ['timeslot__day_index', 'timeslot__period_index'],
            },
        ),
        migrations.CreateModel(
            name='TeacherSubjectAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classgroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='timetable.classgroup')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='timetable.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='timetable.teacher')),
            ],
            options={
                'verbose_name': 'Teacher-Subject Allocation',
                'verbose_name_plural': 'Teacher-Subject Allocations',
                'unique_together': {('classgroup', 'subject', 'teacher')},
            },
        ),
    ]
